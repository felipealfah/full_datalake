[project]
name = "full-data-lakehouse"
version = "0.1.0"
description = "Delta Lakehouse com FastAPI, Polars e Delta Lake"
authors = [
    {name = "Data Engineer", email = "engineer@example.com"}
]
# readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["data-engineering", "delta-lake", "fastapi", "polars"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Web API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Processamento de Dados
    "polars[excel]>=0.20.0",  # Inclui suporte Excel
    "duckdb>=0.9.0",
    "pandas>=2.0.0",  # Fallback para Excel complexos
    "openpyxl>=3.1.0",  # Engine Excel moderna
    "xlrd>=2.0.0",  # Suporte .xls legado
    
    # Delta Lake
    "deltalake>=0.14.0",
    "pyarrow>=14.0.0",  # Backend Delta Lake
    
    # File System Monitoring
    "watchdog>=3.0.0",  # File watcher cross-platform
    
    # APIs externas
    "google-api-python-client>=2.100.0",
    "google-auth-httplib2>=0.1.0",
    "google-auth-oauthlib>=1.0.0",
    "requests>=2.31.0",
    
    # Análise e Notebooks
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    
    # Utilitários
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "flake8>=6.0.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
delta-lake-api = "api.main:main"

[project.urls]
Homepage = "https://github.com/seu-usuario/delta-lakehouse"
Repository = "https://github.com/seu-usuario/delta-lakehouse"
Documentation = "https://github.com/seu-usuario/delta-lakehouse#readme"
Issues = "https://github.com/seu-usuario/delta-lakehouse/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["api", "config", "processamento", "analise"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["api", "config", "processamento", "analise"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "polars.*",
    "deltalake.*",
    "duckdb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=api",
    "--cov=config",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["api", "config", "processamento", "analise"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 